#!/usr/bin/env d2 --theme 200
#

#
#  vim:ts=2:sts=2:sw=2:et:filetype=d2
#
#  https://github.com/HariSekhon/Diagrams-as-Code
#

direction: right

title: {
  label: Kube Cluster
  near: top-center
  shape: text
  style.font-size: 40
  style.underline: true
}

classes: {
  dns: {
    label: DNS
    icon: https://icons.terrastruct.com/gcp%2FProducts%20and%20services%2FNetworking%2FCloud%20DNS.svg
    shape: image
  }
  network: {
    #icon: https://icons.terrastruct.com/essentials%2F092-network.svg
    #icon: https://diagrams.mingrammer.com/img/resources/onprem/network/haproxy.png
    icon: https://diagrams.mingrammer.com/img/resources/gcp/network/routes.png
    shape: image
  }
  storage: {
    label: "HA Networked Storage\nfor Kubernetes\nPersistent Volumes"
    icon: https://icons.terrastruct.com/azure%2FStorage%20Service%20Color%2FGeneral%20Storage.svg
    shape: image
  }
  load_balancer: {
    label: "Nginx)"
    # there isn't a good generic load balancer icon so using this for now - switch to one of the product specific icons if you know which one
    icon: https://diagrams.mingrammer.com/img/resources/aws/network/elastic-load-balancing.png
    #icon: https://diagrams.mingrammer.com/img/resources/onprem/network/haproxy.png
    # icon: https://diagrams.mingrammer.com/img/resources/onprem/network/kong.png
    # icon: https://diagrams.mingrammer.com/img/resources/onprem/network/traefik.png
    # icon: https://landscape.cncf.io/logos/metal-lb.svg
    shape: image
  }
  k8s: {
    icon: https://icons.terrastruct.com/azure%2F_Companies%2FKubernetes.svg
    shape: image
  }
  k8s_ingress: {
    icon: https://diagrams.mingrammer.com/img/resources/k8s/network/ing.png
    shape: image
  }
  server: {
    icon: https://icons.terrastruct.com/essentials%2F112-server.svg
  }
}

users -> DNS -> user_network
DNS.class: dns

users: Users {
  icon: https://icons.terrastruct.com/essentials%2F359-users.svg
  shape: image
}

user_network: Network {class: network}

user_network -> lb1
user_network -> lb2

lb1: {class: load_balancer}
lb2: {class: load_balancer}

lb1 -> network
lb2 -> network

network: Network {
  class: network
  # style.opacity: 0
}

network -> k8s-01
network -> k8s-02
network -> k8s-03

k8s-01 {
  class: server
  kube1: Kubernetes 1 {class: k8s}
}
k8s-02 {
  class: server
  kube2: Kubernetes 2 {class: k8s}
}
k8s-03 {
  class: server
  kube3: Kubernetes 3 {class: k8s}
}

# k8s-01 -- k8s-02 -- k8s-03: VRRP {style.stroke-dash: 5}
# k8s-02 -- k8s-03: VRRP {style.stroke-dash: 5}

# keepalived1: KeepAlive 1
# keepalived2: KeepAlive 2

# lb1 -- keepalived1 -- keepalived2 -- lb2

k8s-01 -> storage_network
k8s-02 -> storage_network
k8s-03 -> storage_network

storage_network: Network {class: network}

storage_network -> storage

storage: {class: storage}
