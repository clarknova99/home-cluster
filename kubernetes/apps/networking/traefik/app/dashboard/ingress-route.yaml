---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  namespace: networking
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    hajimari.io/enable: "true"
  # annotations:
  #   kubernetes.io/ingress.class: traefik-external
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`traefik.${SECRET_DOMAIN}`) #&& (PathPrefix(`/dashboard`) || PathPrefix(`/api`))
      kind: Rule
      services:
        - name: api@internal
          kind: TraefikService
      middlewares:
        - name: networking-traefik-middleware-chains-authentik@kubernetescrd
          namespace: networking
  tls:
    secretName: "traefik-${SECRET_DOMAIN/./-}"
# ---
# apiVersion: traefik.containo.us/v1alpha1
# kind: IngressRoute
# metadata:
#   name: web
#   namespace: networking
#   labels:
#     app: traefik
# spec:
#   entryPoints:
#     - web
#   routes:
#     - match: HostRegexp(`{any:.+}`)
#       kind: Rule
#       priority: 10
#       services:
#         - kind: TraefikService
#           name: noop@internal
#       middlewares:
#         - name: traefik-middleware-redirect-https


# ---
# apiVersion: traefik.containo.us/v1alpha1
# kind: IngressRoute
# metadata:
#   name: traefik-forward-auth
#   namespace: networking
#   labels:
#     app: traefik
# spec:
#   entryPoints:
#     - websecure
#   routes:
#     - kind: Rule
#       match: Host(`auth.${SECRET_DOMAIN}`)
#       services:
#         - name: traefik-forward-auth
#           namespace: networking
#           port: 4181
#       middlewares:
#         - name: traefik-middleware-redirect-https
#         # - name: traefik-middleware-oauth
#   tls:
#     secretName: "${SECRET_DOMAIN}-prod-tls"
