---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authelia
  namespace: networking
spec:
  chart:
    spec:
      chart: authelia
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: authelia
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    # global:
    #   nameOverride: authelia
    controller:
      replicas: 1
      strategy: RollingUpdate
      annotations:
        reloader.stakater.com/auto: "true"
    image:
      registry: ghcr.io
      repository: authelia/authelia
      tag: '4.37.5'
    #args: ["--config", "/data/authelia/config/configuration.yaml"]
    #args: ["--config", "/data/authelia/config/configuration.yaml", "--config.experimental.filters", "expand-env"]
    # containers:
    #   - name: authelia
    #     image: docker.io/authelia/authelia:fix-missing-head-handler
    #     command:
    #       - authelia
    #     args:
    #       - '--config=/data/authelia/config/configuration.yaml'

    # command:
    #   - sh
    #   - -c
    #   - authelia --config /data/authelia/config/configuration.yaml
    # volumeMounts:
    #   - mountPath: "/config"
    #     name: data
    # env:
    #   X_AUTHELIA_CONFIG: /data/authelia/config/configuration.yaml
    configMap:
      # Enable the configMap source for the Authelia config.
      # If this is false you need to provide a volumeMount via PV/PVC or other means that mounts to /config.
      enabled: true
      secret:
        jwt:
        key: ${SECRET_AUTHELIA_JWT}
      default_redirection_url: auth.${SECRET_DOMAIN}
      totp:
        issuer: authelia.com
        period: 30
        skew: 1
      authentication_backend:
        password_reset:
          disable: true
        refresh_interval: 5m
        file:
          path: /config/users.yaml
          password:
            algorithm: argon2
            argon2:
              variant: argon2id
              iterations: 1
              key_length: 32
              salt_length: 16
              memory: 1024
              parallelism: 8
      # https://docs.authelia.com/configuration/access-control.html
      access_control:
        default_policy: deny
        rules:
          # Rules applied to everyone
          - domain: auth.${SECRET_DOMAIN}
            policy: bypass
          - domain: "*.${SECRET_DOMAIN}"
            policy: one_factor
          - domain: "${SECRET_DOMAIN}"
            policy: one_factor
      session:
        name: authelia_session
        # This secret can also be set using the env variables AUTHELIA_SESSION_SECRET_FILE
        # Used a different secret, but the same site as jwt_secret above.
        # secret: SECRET_GOES_HERE # use docker secret file instead AUTHELIA_SESSION_SECRET_FILE
        expiration: 3600 # 1 hour
        inactivity: 300 # 5 minutes
        domain: ${SECRET_DOMAIN} # Should match whatever your root protected domain is
      regulation:
        max_retries: 3
        find_time: 120
        ban_time: 300
      storage:
      # For local storage, uncomment lines below and comment out mysql. https://docs.authelia.com/configuration/storage/sqlite.html
        encryption_key: C59268DC295F23E63B814570C14D48EC766B54E13223E11D34B5EF960B4C0F94
        local:
          path: /config/db.sqlite3
        # mysql:
        # # MySQL allows running multiple authelia instances. Create database and enter details below.
        #   host: MYSQL_HOST
        #   port: 3306
        #   database: authelia
        #   username: DBUSERNAME
          # Password can also be set using a secret: https://docs.authelia.com/configuration/secrets.html
          # password: use docker secret file instead AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE
      notifier:
        # smtp:
        #   username: SMTP_USERNAME
        #   # This secret can also be set using the env variables AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
        #   # password: # use docker secret file instead AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE
        #   host: SMTP_HOST
        #   port: 587 #465
        #   sender: SENDER_EMAIL
        # For testing purpose, notifications can be sent in a file. Be sure map the volume in docker-compose.
        filesystem:
          filename: /config/notifications.txt

    service:
      main:
        ports:
          http:
            port: 9091
    persistence:
      name: data
      enabled: true
      accessMode: ReadWriteMany
      path: /config
      existingClaim: pvc-networking
    resources:
      requests:
        cpu: 5m
        memory: 10Mi
      limits:
        memory: 100Mi
  interval: 10m0s
