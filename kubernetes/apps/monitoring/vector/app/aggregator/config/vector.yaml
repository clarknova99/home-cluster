---
data_dir: /vector-data-dir
api:
  enabled: true
  address: 0.0.0.0:8686

enrichment_tables:
  geoip_table:
    type: geoip
    path: /usr/share/GeoIP/GeoLite2-City.mmdb

#
# Sources
#
sources:
  journald_source:
    type: vector
    version: "2"
    address: 0.0.0.0:6000

  kubernetes_source:
    type: vector
    version: "2"
    address: 0.0.0.0:6010

  syslog_source:
    type: syslog
    address: 0.0.0.0:1514
    mode: tcp
#
# Transforms
#
transforms:
  kubernetes_remap:
    type: remap
    inputs:
      - kubernetes_source
    source: |
      # Standardize 'app' index
      .custom_app_name = .pod_labels."app.kubernetes.io/name" || .pod_labels.app || .pod_labels."k8s-app" || "unknown"
      .custom_instance_name = .pod_labels."app.kubernetes.io/instance"
      .pmessage = parse_json!(.message)
      # Drop pod_labels
      # del(.pod_labels)
  kubernetes_drop_empty_messages:
    type: filter
    inputs:
      - kubernetes_remap
    condition: |
      length!(.message) > 1
  kubernetes_route_nginx:
    type: route
    inputs:
      - kubernetes_drop_empty_messages
    route:
      nginx: .custom_app_name == "ingress-nginx"
  # .message = parse_json!(.message)
  kubernetes_remap_nginx:
    type: remap
    inputs:
      - kubernetes_route_nginx.nginx
    source: |
      . = parse_json!(string!(.message))
      ip_csv = parse_csv!(.x_forwarded_for)
      .ip_address = ip_csv[0]
      new_event = { "timestamp:": .time }
      new_event |= { "ip_address": ip_csv[0] }
      new_event |= { "user_agent": .http_user_agent }
      new_event |= { "status": .status }
      new_event |= { "vhost": .vhost }
      new_event |= { "path": .path }
      new_event |= { "query": .request_query }
      new_event |= { "geoip_country_code": .geoip_country_code }
      new_event |= { "geoip_country_name": .geoip_country_name }
      new_event |= { "geoip_city": .geoip_city }
      new_event |= { "geoip_latitude": .geoip_latitude }
      new_event |= { "geoip_longitude": .geoip_longitude }
      new_event |= { "geoip_region": .geoip_region }
      new_event |= { "geoip_region_name": .geoip_region_name }
      . = new_event
  kubernetes_nginx_drop_local:
    type: remap
    inputs:
      - kubernetes_remap_nginx
    source: |
      # Define local LAN IP ranges
      is_local_ip = starts_with!(.ip_address, "192.168.") || starts_with!(.ip_address, "10.") || starts_with!(.ip_address, "127.")

      # Drop local IPs by only allowing non-local IPs to pass
      if is_local_ip {
        abort
      }
  geo_enriched:
    type: "remap"
    inputs:
      - kubernetes_nginx_drop_local
    source: |
      .geoip = get_enrichment_table_record!(
        "geoip_table", {
          "ip": .ip_address
        }
      )


  # kubernetes_remap_nginx:
  #   type: remap
  #   inputs:
  #     - kubernetes_route_nginx.nginx
  #   source: |
  #     .message = parse_json!(.message)



  # syslog_remap:
  #   type: remap
  #   inputs: ["syslog_source"]
  #   source: |
  #     msg = parse_syslog!(string!(.message))

  # syslog_route:
  #   type: route
  #   inputs: ["syslog_remap"]
  #   route:
  #     pass_action: .filter_action == "pass"

  # syslog_geoip_remap:
  #   type: remap
  #   inputs: ["syslog_route.pass_action"]
  #   source: |
  #     .geoip = get_enrichment_table_record!("geoip_table",
  #       {
  #         "ip": .filter_source_ip
  #       })
#
# Sinks
#

sinks:
  journald:
    inputs: ["journald_source"]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      hostname: '{{ host }}'

  kubernetes:
    inputs:
      - kubernetes_remap
      - kubernetes_remap_nginx
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: rewrite_timestamp
    remove_label_fields: true
    remove_timestamp: true
    labels:
      k8_app: '{{ custom_app_name }}'
      k8_namespace: '{{ kubernetes.pod_namespace }}'
      k8_node: '{{ kubernetes.pod_node_name }}'
      k8_instance: '{{ custom_instance_name }}'

  syslog:
    inputs: ["syslog_source"]
    type: loki
    endpoint: http://loki-gateway.monitoring.svc.cluster.local
    encoding:
      codec: json
    out_of_order_action: accept
    #remove_label_fields: true
    remove_timestamp: true
    labels:
      hostname: '{{ host }}'

  parseable-kubernetes:
    inputs:
      - kubernetes_remap
    type: http
    method: post
    batch:
      max_bytes: 10485760
      max_events: 1000
      timeout_secs: 10
    compression: gzip
    encoding:
      codec: json
    uri: 'http://parseable.monitoring.svc.cluster.local/api/v1/ingest'
    auth:
      strategy: basic
      user: "${SECRET_PARSEABLE_USERNAME}"
      password: "${SECRET_PARSEABLE_PASSWORD}"
    request:
      headers:
        X-P-Stream: kubernetes
    healthcheck:
      enabled: true
      path: 'http://parseable.monitoring.svc.cluster.local/api/v1/liveness'
      port: 80

  parseable-nginx:
    inputs:
      - geo_enriched
    type: http
    method: post
    batch:
      max_bytes: 10485760
      max_events: 1000
      timeout_secs: 10
    compression: gzip
    encoding:
      codec: json
    uri: 'http://parseable.monitoring.svc.cluster.local/api/v1/ingest'
    auth:
      strategy: basic
      user: "${SECRET_PARSEABLE_USERNAME}"
      password: "${SECRET_PARSEABLE_PASSWORD}"
    request:
      headers:
        X-P-Stream: nginx
    healthcheck:
      enabled: true
      path: 'http://parseable.monitoring.svc.cluster.local/api/v1/liveness'
      port: 80
